name: release

on:
  push:
    branches: "release*"
  pull_request:
    branches: "release*"

permissions:
  contents: read

jobs:
  release:
    permissions: write-all
    runs-on: ubuntu-latest
    name: Release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Packing release
        run: |
          base_dir=${PWD}
          password='password'
          branch_name=$(git symbolic-ref -q HEAD)
          branch_name=${branch_name##refs/heads/}
          branch_name=${branch_name:-HEAD}
          branch_name=${branch_name//\//_}
          
          echo "Preparing folder for copying.."
          git pull >/dev/null
          git clean -xfdf >/dev/null
          git submodule foreach --recursive git clean -xfd >/dev/null
          git reset --hard >/dev/null
          git submodule sync >/dev/null
          git submodule foreach --recursive git reset --hard >/dev/null
          git submodule update --init --recursive >/dev/null
          
          if [ -d "$base_dir"/"$branch_name" ]; then
          echo "Removing patch destination folder"
          rm -r "$base_dir"/"$branch_name"
          echo "Patch destination folder removed"
          fi
          
          echo "Copying.."
          cp -r "$base_dir"/"$folder" "$base_dir"/"$branch_name"
          
          echo "Removing configs.."
          cd ..
          rm -rf "$branch_name"/".git"
          rm -f "$branch_name"/"flyway.conf"
          rm -f "$branch_name"/"config.php"
          rm -f "$branch_name"/"config-analytics.php"
          rm -f "$branch_name"/"config-dist.php"
          rm -f "$branch_name"/"config-extra.php"
          rm -f "$branch_name"/"config-unittest.php"
          find "$branch_name" -type f -name "*.config" -delete
          
          echo "Zipping folder.."
          cd $branch_name
          zip -P "$password" -r "$base_dir"/"$branch_name"".zip" ./* >/dev/null
          
          echo "Cleaning up.."
          rm -rf "$base_dir"/"$branch_name"
          
          echo "Copied and removed configs. Password for the file is ${password}";

      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./playground.zip
          asset_name: playground.zip
          asset_content_type: application/zip